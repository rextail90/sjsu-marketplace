{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  conversations: {},\n  unreadCount: 0,\n  loading: false,\n  error: null\n};\nconst messagesSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    fetchMessagesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchMessagesSuccess: (state, action) => {\n      state.loading = false;\n      state.items = action.payload.content;\n    },\n    fetchMessagesFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    fetchConversationStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchConversationSuccess: (state, action) => {\n      state.loading = false;\n      state.conversations[action.payload.userId] = action.payload.messages;\n    },\n    fetchConversationFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    sendMessageStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    sendMessageSuccess: (state, action) => {\n      state.loading = false;\n      state.items.unshift(action.payload);\n      const conversationId = action.payload.sender.id;\n      if (state.conversations[conversationId]) {\n        state.conversations[conversationId].push(action.payload);\n      }\n    },\n    sendMessageFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    markMessageAsReadStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    markMessageAsReadSuccess: (state, action) => {\n      state.loading = false;\n      const message = state.items.find(m => m.id === action.payload);\n      if (message) {\n        message.read = true;\n      }\n      state.unreadCount = Math.max(0, state.unreadCount - 1);\n    },\n    markMessageAsReadFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setUnreadCount: (state, action) => {\n      state.unreadCount = action.payload;\n    }\n  }\n});\nexport const {\n  fetchMessagesStart,\n  fetchMessagesSuccess,\n  fetchMessagesFailure,\n  fetchConversationStart,\n  fetchConversationSuccess,\n  fetchConversationFailure,\n  sendMessageStart,\n  sendMessageSuccess,\n  sendMessageFailure,\n  markMessageAsReadStart,\n  markMessageAsReadSuccess,\n  markMessageAsReadFailure,\n  setUnreadCount\n} = messagesSlice.actions;\nexport default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","conversations","unreadCount","loading","error","messagesSlice","name","reducers","fetchMessagesStart","state","fetchMessagesSuccess","action","payload","content","fetchMessagesFailure","fetchConversationStart","fetchConversationSuccess","userId","messages","fetchConversationFailure","sendMessageStart","sendMessageSuccess","unshift","conversationId","sender","id","push","sendMessageFailure","markMessageAsReadStart","markMessageAsReadSuccess","message","find","m","read","Math","max","markMessageAsReadFailure","setUnreadCount","actions","reducer"],"sources":["C:/Users/Sean/Desktop/sjsu-marketplace/frontend/src/store/slices/messagesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Message } from '../../types';\r\nimport { messages } from '../../services/api';\r\n\r\ninterface MessagesState {\r\n    items: Message[];\r\n    conversations: { [key: number]: Message[] };\r\n    unreadCount: number;\r\n    loading: boolean;\r\n    error: string | null;\r\n}\r\n\r\nconst initialState: MessagesState = {\r\n    items: [],\r\n    conversations: {},\r\n    unreadCount: 0,\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nconst messagesSlice = createSlice({\r\n    name: 'messages',\r\n    initialState,\r\n    reducers: {\r\n        fetchMessagesStart: (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        fetchMessagesSuccess: (state, action: PayloadAction<{ content: Message[]; totalElements: number }>) => {\r\n            state.loading = false;\r\n            state.items = action.payload.content;\r\n        },\r\n        fetchMessagesFailure: (state, action: PayloadAction<string>) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n        fetchConversationStart: (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        fetchConversationSuccess: (state, action: PayloadAction<{ userId: number; messages: Message[] }>) => {\r\n            state.loading = false;\r\n            state.conversations[action.payload.userId] = action.payload.messages;\r\n        },\r\n        fetchConversationFailure: (state, action: PayloadAction<string>) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n        sendMessageStart: (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        sendMessageSuccess: (state, action: PayloadAction<Message>) => {\r\n            state.loading = false;\r\n            state.items.unshift(action.payload);\r\n            const conversationId = action.payload.sender.id;\r\n            if (state.conversations[conversationId]) {\r\n                state.conversations[conversationId].push(action.payload);\r\n            }\r\n        },\r\n        sendMessageFailure: (state, action: PayloadAction<string>) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n        markMessageAsReadStart: (state) => {\r\n            state.loading = true;\r\n            state.error = null;\r\n        },\r\n        markMessageAsReadSuccess: (state, action: PayloadAction<number>) => {\r\n            state.loading = false;\r\n            const message = state.items.find(m => m.id === action.payload);\r\n            if (message) {\r\n                message.read = true;\r\n            }\r\n            state.unreadCount = Math.max(0, state.unreadCount - 1);\r\n        },\r\n        markMessageAsReadFailure: (state, action: PayloadAction<string>) => {\r\n            state.loading = false;\r\n            state.error = action.payload;\r\n        },\r\n        setUnreadCount: (state, action: PayloadAction<number>) => {\r\n            state.unreadCount = action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    fetchMessagesStart,\r\n    fetchMessagesSuccess,\r\n    fetchMessagesFailure,\r\n    fetchConversationStart,\r\n    fetchConversationSuccess,\r\n    fetchConversationFailure,\r\n    sendMessageStart,\r\n    sendMessageSuccess,\r\n    sendMessageFailure,\r\n    markMessageAsReadStart,\r\n    markMessageAsReadSuccess,\r\n    markMessageAsReadFailure,\r\n    setUnreadCount,\r\n} = messagesSlice.actions;\r\n\r\nexport default messagesSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}